package org.somak.messenger.resources;

import java.net.URI;
import java.util.List;

import javax.ws.rs.BeanParam;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriBuilder;
import javax.ws.rs.core.UriInfo;

import org.somak.messenger.model.Message;
import org.somak.messenger.resources.bean.MessageFilterBean;
import org.somak.messenger.service.MessageService;

import com.sun.org.apache.xml.internal.security.algorithms.MessageDigestAlgorithm;

@Path("/messages")
public class MessageResource {

	MessageService msgService = new MessageService();
	
	//Old implementation

/*	@GET
	@Produces(MediaType.APPLICATION_JSON)
	public List<Message> getAllMessages(@QueryParam("year") int year,
			 @QueryParam("start") int start,
			 @QueryParam("size") int size) {
		
		if (year!=0)
		{
			return msgService.getAllMessagesForYear(year);
		}
		
		if (size!=0) {
			return msgService.getAllMessagesPaginated(start, size);
		}
		return msgService.getAllMessages();
	}*/
	
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	public List<Message> getAllMessages(@BeanParam MessageFilterBean filterBean) {
		
		if (filterBean.getYear()!=0)
		{
			return msgService.getAllMessagesForYear(filterBean.getYear());
		}
		
		if (filterBean.getSize()!=0) {
			return msgService.getAllMessagesPaginated(filterBean.getStart(), filterBean.getSize());
		}
		return msgService.getAllMessages();
	}

	@GET
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/{msgId}")
	public Message getMessages(@PathParam("msgId") long messageId, @Context UriInfo uriInfo) {
		Message msg=msgService.getMessage(messageId);
		getUri(uriInfo, msg);
		return msg;
	}

	private void getUri(UriInfo uriInfo, Message msg) {
		UriBuilder builder=uriInfo.getBaseUriBuilder();
		String uri = builder.path(MessageResource.class).build().toString();
		msg.addLink(uri,"self");
	}

	//Old implementation
	/*@POST
	@Produces(MediaType.APPLICATION_JSON)
	@Consumes(MediaType.APPLICATION_JSON)
	public Message addMessage(Message msg) {
		return msgService.addMessage(msg);
	}*/
	
	// New implementation using Response Builder where we can send status code of
	// our choice and new created resource location in response header
	@POST
	@Produces(MediaType.APPLICATION_JSON)
	@Consumes(MediaType.APPLICATION_JSON)
	public Response addMessage(Message msg, @Context UriInfo uriInfo) {
		Message newMessage= msgService.addMessage(msg);
		String newId=String.valueOf(newMessage.getId());		
		UriBuilder builder = uriInfo.getAbsolutePathBuilder();
		URI uri = builder.path(newId).build();
		return Response.created(uri).entity(newMessage).build();				
	    
	}

	@PUT
	@Produces(MediaType.APPLICATION_JSON)
	@Consumes(MediaType.APPLICATION_JSON)
	@Path("/{msgId}")
	public Message updateMessage(@PathParam("msgId") long messageId, Message msg) {
		msg.setId(messageId);
		return msgService.updateMessage(msg);
	}

	@DELETE
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/{msgId}")
	public void deleteMessage(@PathParam("msgId") long messageId) {

		msgService.deleteMessage(messageId);
	}
	
	//A hook to call sub-resource i.e Comment Resource
	@Path("/{messageId}/comments")
	public CommentResource getCommentResource() {
		return new CommentResource();
	}

}
